# High-Level Package Diagram (Task 0)

```mermaid
graph TB
    %% ============= LAYERS =============
    subgraph "Presentation Layer"
        API[API Controllers]
        Endpoints[REST Endpoints]
        Services[Web Services]
    end
    
    subgraph "Business Logic Layer"
        Facade[HBnB Facade]
        UserService[User Service]
        PlaceService[Place Service]
        ReviewService[Review Service]
        AmenityService[Amenity Service]
        Models[Domain Models]
    end
    
    subgraph "Persistence Layer"
        UserRepo[User Repository]
        PlaceRepo[Place Repository]
        ReviewRepo[Review Repository]
        AmenityRepo[Amenity Repository]
        Database[(Database)]
    end
    
    %% ============= FLOWS =============
    API --> Facade
    Endpoints --> Facade
    Services --> Facade
    
    Facade --> UserService
    Facade --> PlaceService
    Facade --> ReviewService
    Facade --> AmenityService
    
    UserService --> Models
    PlaceService --> Models
    ReviewService --> Models
    AmenityService --> Models
    
    UserService --> UserRepo
    PlaceService --> PlaceRepo
    ReviewService --> ReviewRepo
    AmenityService --> AmenityRepo
    
    UserRepo --> Database
    PlaceRepo --> Database
    ReviewRepo --> Database
    AmenityRepo --> Database

    %% ============= EMBEDDED LEGEND =============
    subgraph Legend["Legend / Légende (integrated)"]
        LFR["FR — En bref :
- Presentation (= salle/serveur) reçoit la requête.
- Ça passe par **HBnB Facade** (porte d’entrée métier).
- La Facade délègue à un **Service** (User/Place/Review/Amenity) qui applique les règles et manipule les **Models**.
- Pour lire/écrire, le Service passe par un **Repository** jusqu’à la **Database**.
- Retour : Database → Repository → Service → Facade → API → Client.
Idée clé : sens unique **Presentation → Business → Persistence** (jamais l’inverse)."]
        LEN["EN — In short:
- Presentation (dining room/waiter) receives the request.
- It goes through **HBnB Facade** (single business entry point).
- The Facade delegates to a **Service** (User/Place/Review/Amenity) that applies rules and uses **Models**.
- Read/write goes via a **Repository** down to the **Database**.
- Back path: Database → Repository → Service → Facade → API → Client.
Key idea: one-way **Presentation → Business → Persistence** (never the other way)."]
    end

    %% ============= STYLES =============
    classDef presentationLayer fill:#e1f5fe,stroke:#90caf9,color:#0d47a1
    classDef businessLayer fill:#f3e5f5,stroke:#ce93d8,color:#4a148c
    classDef persistenceLayer fill:#e8f5e9,stroke:#81c784,color:#1b5e20
    classDef legendStyle fill:#f9f9f9,stroke:#cfcfcf,color:#333

    class API,Endpoints,Services presentationLayer
    class Facade,UserService,PlaceService,ReviewService,AmenityService,Models businessLayer
    class UserRepo,PlaceRepo,ReviewRepo,AmenityRepo,Database persistenceLayer
    class LFR,LEN legendStyle
